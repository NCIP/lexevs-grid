package org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.SortPortType;
import org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.service.SortServiceAddressingLocator;
import org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.common.SortI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class SortClient extends SortClientBase implements SortI {	

	public SortClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public SortClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public SortClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public SortClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(SortClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  SortClient client = new SortClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.lifetime.DestroyResponse destroy(org.oasis.wsrf.lifetime.Destroy params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"destroy");
    return portType.destroy(params);
    }
  }

  public org.oasis.wsrf.lifetime.SetTerminationTimeResponse setTerminationTime(org.oasis.wsrf.lifetime.SetTerminationTime params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"setTerminationTime");
    return portType.setTerminationTime(params);
    }
  }

  public java.lang.String getName() throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getName");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetNameRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetNameRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetNameResponse boxedResult = portType.getName(params);
    return boxedResult.getResponse();
    }
  }

  public java.lang.String getDescription() throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getDescription");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetDescriptionRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetDescriptionRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetDescriptionResponse boxedResult = portType.getDescription(params);
    return boxedResult.getResponse();
    }
  }

  public java.lang.String getProvider() throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getProvider");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetProviderRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetProviderRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetProviderResponse boxedResult = portType.getProvider(params);
    return boxedResult.getResponse();
    }
  }

  public java.lang.String getVersion() throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getVersion");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetVersionRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetVersionRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.stubs.GetVersionResponse boxedResult = portType.getVersion(params);
    return boxedResult.getResponse();
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

}
