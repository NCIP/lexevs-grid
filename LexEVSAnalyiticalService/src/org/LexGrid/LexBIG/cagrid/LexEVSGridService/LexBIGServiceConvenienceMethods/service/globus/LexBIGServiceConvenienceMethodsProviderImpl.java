/*******************************************************************************
 * Copyright: (c) 2004-2007 Mayo Foundation for Medical Education and 
 * Research (MFMER). All rights reserved. MAYO, MAYO CLINIC, and the
 * triple-shield Mayo logo are trademarks and service marks of MFMER.
 * 
 * Except as contained in the copyright notice above, or as used to identify 
 * MFMER as the author of this software, the trade names, trademarks, service
 * marks, or product names of the copyright holder shall not be used in
 * advertising, promotion or otherwise in connection with this software without
 * prior written authorization of the copyright holder.
 *   
 * Licensed under the Eclipse Public License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 *   
 *  		http://www.eclipse.org/legal/epl-v10.html
 * 
 *  		
 *******************************************************************************/
package org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.service.globus;

import org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.service.LexBIGServiceConvenienceMethodsImpl;

import java.rmi.RemoteException;

/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This class implements each method in the portType of the service.  Each method call represented
 * in the port type will be then mapped into the unwrapped implementation which the user provides
 * in the LexBIGCaGridServicesImpl class.  This class handles the boxing and unboxing of each method call
 * so that it can be correclty mapped in the unboxed interface that the developer has designed and 
 * has implemented.  Authorization callbacks are automatically made for each method based
 * on each methods authorization requirements.
 * 
 * @created by Introduce Toolkit version 1.1
 * 
 */
public class LexBIGServiceConvenienceMethodsProviderImpl{
	
	LexBIGServiceConvenienceMethodsImpl impl;
	
	public LexBIGServiceConvenienceMethodsProviderImpl() throws RemoteException {
		impl = new LexBIGServiceConvenienceMethodsImpl();
	}
	

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetRenderingDetailResponse getRenderingDetail(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetRenderingDetailRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetRenderingDetailResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetRenderingDetailResponse();
    boxedResult.setCodingSchemeRendering(impl.getRenderingDetail(params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemesWithSupportedAssociationResponse getCodingSchemesWithSupportedAssociation(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemesWithSupportedAssociationRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemesWithSupportedAssociationResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemesWithSupportedAssociationResponse();
    boxedResult.setCodingSchemeRenderingList(impl.getCodingSchemesWithSupportedAssociation(params.getAssociationIdentification().getAssociationIdentification()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyIDsResponse getHierarchyIDs(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyIDsRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyIDsResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyIDsResponse();
    boxedResult.setHierarchyIdentification(impl.getHierarchyIDs(params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredResponse isCodeRetired(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredResponse();
    boxedResult.setCodeState(impl.isCodeRetired(params.getConceptIdentification().getConceptIdentification(),params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameResponse getAssociationForwardName(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameResponse();
    boxedResult.setDirectionalAssociationIdentification(impl.getAssociationForwardName(params.getAssociationIdentification().getAssociationIdentification(),params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNamesResponse getAssociationForwardNames(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNamesRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNamesResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNamesResponse();
    boxedResult.setDirectionalAssociationIdentification(impl.getAssociationForwardNames(params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameResponse getAssociationReverseName(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameResponse();
    boxedResult.setDirectionalAssociationIdentification(impl.getAssociationReverseName(params.getAssociationIdentification().getAssociationIdentification(),params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNamesResponse getAssociationReverseNames(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNamesRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNamesResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNamesResponse();
    boxedResult.setDirectionalAssociationIdentification(impl.getAssociationReverseNames(params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameResponse isForwardName(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameResponse();
    boxedResult.setDirection(impl.isForwardName(params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag(),params.getAssociationIdentification().getAssociationIdentification()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameResponse isReverseName(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameResponse();
    boxedResult.setDirection(impl.isReverseName(params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag(),params.getAssociationIdentification().getAssociationIdentification()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextResponse getHierarchyLevelNext(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextResponse();
    boxedResult.setAssociationList(impl.getHierarchyLevelNext(params.getHierarchyResolutionPolicy().getHierarchyResolutionPolicy(),params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevResponse getHierarchyLevelPrev(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevResponse();
    boxedResult.setAssociationList(impl.getHierarchyLevelPrev(params.getHierarchyResolutionPolicy().getHierarchyResolutionPolicy(),params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootResponse getHierarchyPathToRoot(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootResponse();
    boxedResult.setAssociationList(impl.getHierarchyPathToRoot(params.getHierarchyResolutionPolicy().getHierarchyResolutionPolicy(),params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag(),params.getHierarchyPathResolveOption().getHierarchyPathResolveOption()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsResponse getHierarchyRoots(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsResponse();
    boxedResult.setResolvedConceptReferenceList(impl.getHierarchyRoots(params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag(),params.getHierarchyIdentification().getHierarchyIdentification()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetResponse getHierarchyRootSet(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetResponse();
    boxedResult.setCodedNodeSetReference(impl.getHierarchyRootSet(params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag(),params.getHierarchyIdentification().getHierarchyIdentification()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetResponse createCodeNodeSet(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetResponse();
    boxedResult.setCodedNodeSetReference(impl.createCodeNodeSet(params.getConceptIdentification().getConceptIdentification(),params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardAndReverseNamesResponse getAssociationForwardAndReverseNames(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardAndReverseNamesRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardAndReverseNamesResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardAndReverseNamesResponse();
    boxedResult.setAssociationIdentification(impl.getAssociationForwardAndReverseNames(params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemeCopyrightResponse getCodingSchemeCopyright(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemeCopyrightRequest params) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemeCopyrightResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemeCopyrightResponse();
    boxedResult.setCodingSchemeCopyRight(impl.getCodingSchemeCopyright(params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelResponse getAssociationReverseOneLevel(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequest params) throws RemoteException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelResponse();
    boxedResult.setAssociation(impl.getAssociationReverseOneLevel(params.getConceptIdentification().getConceptIdentification(),params.getRelationContainerIdentification().getRelationContainerIdentification(),params.getAssociationIdentification().getAssociationIdentification(),params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag(),params.getBuildReferencedEntries().getResolveConcepts(),params.getAssociationQualifiers().getNameAndValueList()));
    return boxedResult;
  }

    public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelResponse getAssociationForwardOneLevel(org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequest params) throws RemoteException {
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelResponse boxedResult = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelResponse();
    boxedResult.setAssociation(impl.getAssociationForwardOneLevel(params.getConceptIdentification().getConceptIdentification(),params.getRelationContainerIdentification().getRelationContainerIdentification(),params.getAssociationIdentification().getAssociationIdentification(),params.getCodingSchemeIdentification().getCodingSchemeIdentification(),params.getVersionOrTag().getCodingSchemeVersionOrTag(),params.getBuildReferencedEntries().getResolveConcepts(),params.getAssociationQualifiers().getNameAndValueList()));
    return boxedResult;
  }

}
