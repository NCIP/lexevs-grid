/*
* Copyright: (c) Mayo Foundation for Medical Education and
* Research (MFMER). All rights reserved. MAYO, MAYO CLINIC, and the
* triple-shield Mayo logo are trademarks and service marks of MFMER.
*
* Distributed under the OSI-approved BSD 3-Clause License.
* See http://ncip.github.com/lexevs-grid/LICENSE.txt for details.
*/
package org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.LexBIGServiceConvenienceMethodsPortType;
import org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.service.LexBIGServiceConvenienceMethodsServiceAddressingLocator;
import org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.common.LexBIGServiceConvenienceMethodsI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class LexBIGServiceConvenienceMethodsClient extends LexBIGServiceConvenienceMethodsClientBase implements LexBIGServiceConvenienceMethodsI {	

	public LexBIGServiceConvenienceMethodsClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public LexBIGServiceConvenienceMethodsClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public LexBIGServiceConvenienceMethodsClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public LexBIGServiceConvenienceMethodsClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(LexBIGServiceConvenienceMethodsClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  LexBIGServiceConvenienceMethodsClient client = new LexBIGServiceConvenienceMethodsClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.LexGrid.LexBIG.iso21090.DataModel.InterfaceElements.CodingSchemeRendering getRenderingDetail(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getRenderingDetail");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetRenderingDetailRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetRenderingDetailRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetRenderingDetailRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetRenderingDetailRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetRenderingDetailRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetRenderingDetailRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetRenderingDetailResponse boxedResult = portType.getRenderingDetail(params);
    return boxedResult.getCodingSchemeRendering();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.Collections.CodingSchemeRenderingList getCodingSchemesWithSupportedAssociation(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.AssociationIdentification associationIdentification) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getCodingSchemesWithSupportedAssociation");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemesWithSupportedAssociationRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemesWithSupportedAssociationRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemesWithSupportedAssociationRequestAssociationIdentification associationIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemesWithSupportedAssociationRequestAssociationIdentification();
    associationIdentificationContainer.setAssociationIdentification(associationIdentification);
    params.setAssociationIdentification(associationIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemesWithSupportedAssociationResponse boxedResult = portType.getCodingSchemesWithSupportedAssociation(params);
    return boxedResult.getCodingSchemeRenderingList();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.cagrid.HierarchyIdentification[] getHierarchyIDs(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getHierarchyIDs");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyIDsRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyIDsRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyIDsRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyIDsRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyIDsRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyIDsRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyIDsResponse boxedResult = portType.getHierarchyIDs(params);
    return boxedResult.getHierarchyIdentification();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodeState isCodeRetired(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.ConceptIdentification conceptIdentification,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"isCodeRetired");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredRequestConceptIdentification conceptIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredRequestConceptIdentification();
    conceptIdentificationContainer.setConceptIdentification(conceptIdentification);
    params.setConceptIdentification(conceptIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsCodeRetiredResponse boxedResult = portType.isCodeRetired(params);
    return boxedResult.getCodeState();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.cagrid.DirectionalAssociationIdentification getAssociationForwardName(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.AssociationIdentification associationIdentification,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAssociationForwardName");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameRequestAssociationIdentification associationIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameRequestAssociationIdentification();
    associationIdentificationContainer.setAssociationIdentification(associationIdentification);
    params.setAssociationIdentification(associationIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNameResponse boxedResult = portType.getAssociationForwardName(params);
    return boxedResult.getDirectionalAssociationIdentification();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.cagrid.DirectionalAssociationIdentification[] getAssociationForwardNames(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAssociationForwardNames");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNamesRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNamesRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNamesRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNamesRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNamesRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNamesRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardNamesResponse boxedResult = portType.getAssociationForwardNames(params);
    return boxedResult.getDirectionalAssociationIdentification();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.cagrid.DirectionalAssociationIdentification getAssociationReverseName(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.AssociationIdentification associationIdentification,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAssociationReverseName");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameRequestAssociationIdentification associationIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameRequestAssociationIdentification();
    associationIdentificationContainer.setAssociationIdentification(associationIdentification);
    params.setAssociationIdentification(associationIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNameResponse boxedResult = portType.getAssociationReverseName(params);
    return boxedResult.getDirectionalAssociationIdentification();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.cagrid.DirectionalAssociationIdentification[] getAssociationReverseNames(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAssociationReverseNames");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNamesRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNamesRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNamesRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNamesRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNamesRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNamesRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseNamesResponse boxedResult = portType.getAssociationReverseNames(params);
    return boxedResult.getDirectionalAssociationIdentification();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.cagrid.Direction isForwardName(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.AssociationIdentification associationIdentification) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"isForwardName");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameRequestAssociationIdentification associationIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameRequestAssociationIdentification();
    associationIdentificationContainer.setAssociationIdentification(associationIdentification);
    params.setAssociationIdentification(associationIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsForwardNameResponse boxedResult = portType.isForwardName(params);
    return boxedResult.getDirection();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.cagrid.Direction isReverseName(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.AssociationIdentification associationIdentification) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"isReverseName");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameRequestAssociationIdentification associationIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameRequestAssociationIdentification();
    associationIdentificationContainer.setAssociationIdentification(associationIdentification);
    params.setAssociationIdentification(associationIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.IsReverseNameResponse boxedResult = portType.isReverseName(params);
    return boxedResult.getDirection();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.Collections.AssociationList getHierarchyLevelNext(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.HierarchyResolutionPolicy hierarchyResolutionPolicy,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getHierarchyLevelNext");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextRequestHierarchyResolutionPolicy hierarchyResolutionPolicyContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextRequestHierarchyResolutionPolicy();
    hierarchyResolutionPolicyContainer.setHierarchyResolutionPolicy(hierarchyResolutionPolicy);
    params.setHierarchyResolutionPolicy(hierarchyResolutionPolicyContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelNextResponse boxedResult = portType.getHierarchyLevelNext(params);
    return boxedResult.getAssociationList();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.Collections.AssociationList getHierarchyLevelPrev(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.HierarchyResolutionPolicy hierarchyResolutionPolicy,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getHierarchyLevelPrev");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevRequestHierarchyResolutionPolicy hierarchyResolutionPolicyContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevRequestHierarchyResolutionPolicy();
    hierarchyResolutionPolicyContainer.setHierarchyResolutionPolicy(hierarchyResolutionPolicy);
    params.setHierarchyResolutionPolicy(hierarchyResolutionPolicyContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyLevelPrevResponse boxedResult = portType.getHierarchyLevelPrev(params);
    return boxedResult.getAssociationList();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.Collections.AssociationList getHierarchyPathToRoot(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.HierarchyResolutionPolicy hierarchyResolutionPolicy,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag,org.LexGrid.LexBIG.iso21090.DataModel.enums.HierarchyPathResolveOption hierarchyPathResolveOption) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getHierarchyPathToRoot");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootRequestHierarchyResolutionPolicy hierarchyResolutionPolicyContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootRequestHierarchyResolutionPolicy();
    hierarchyResolutionPolicyContainer.setHierarchyResolutionPolicy(hierarchyResolutionPolicy);
    params.setHierarchyResolutionPolicy(hierarchyResolutionPolicyContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootRequestHierarchyPathResolveOption hierarchyPathResolveOptionContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootRequestHierarchyPathResolveOption();
    hierarchyPathResolveOptionContainer.setHierarchyPathResolveOption(hierarchyPathResolveOption);
    params.setHierarchyPathResolveOption(hierarchyPathResolveOptionContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyPathToRootResponse boxedResult = portType.getHierarchyPathToRoot(params);
    return boxedResult.getAssociationList();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.Collections.ResolvedConceptReferenceList getHierarchyRoots(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.HierarchyIdentification hierarchyIdentification) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getHierarchyRoots");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsRequestHierarchyIdentification hierarchyIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsRequestHierarchyIdentification();
    hierarchyIdentificationContainer.setHierarchyIdentification(hierarchyIdentification);
    params.setHierarchyIdentification(hierarchyIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootsResponse boxedResult = portType.getHierarchyRoots(params);
    return boxedResult.getResolvedConceptReferenceList();
    }
  }

  public org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeSet.client.CodedNodeSetClient getHierarchyRootSet(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.HierarchyIdentification hierarchyIdentification) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getHierarchyRootSet");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetRequestHierarchyIdentification hierarchyIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetRequestHierarchyIdentification();
    hierarchyIdentificationContainer.setHierarchyIdentification(hierarchyIdentification);
    params.setHierarchyIdentification(hierarchyIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetHierarchyRootSetResponse boxedResult = portType.getHierarchyRootSet(params);
    EndpointReferenceType ref = boxedResult.getCodedNodeSetReference().getEndpointReference();
    return new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeSet.client.CodedNodeSetClient(ref,getProxy());
    }
  }

  public org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeSet.client.CodedNodeSetClient createCodeNodeSet(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.ConceptIdentification[] conceptIdentification,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createCodeNodeSet");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetRequestConceptIdentification conceptIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetRequestConceptIdentification();
    conceptIdentificationContainer.setConceptIdentification(conceptIdentification);
    params.setConceptIdentification(conceptIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.CreateCodeNodeSetResponse boxedResult = portType.createCodeNodeSet(params);
    EndpointReferenceType ref = boxedResult.getCodedNodeSetReference().getEndpointReference();
    return new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeSet.client.CodedNodeSetClient(ref,getProxy());
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.cagrid.AssociationIdentification[] getAssociationForwardAndReverseNames(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAssociationForwardAndReverseNames");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardAndReverseNamesRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardAndReverseNamesRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardAndReverseNamesRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardAndReverseNamesRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardAndReverseNamesRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardAndReverseNamesRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardAndReverseNamesResponse boxedResult = portType.getAssociationForwardAndReverseNames(params);
    return boxedResult.getAssociationIdentification();
    }
  }

  public org.oasis.wsrf.lifetime.DestroyResponse destroy(org.oasis.wsrf.lifetime.Destroy params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"destroy");
    return portType.destroy(params);
    }
  }

  public org.oasis.wsrf.lifetime.SetTerminationTimeResponse setTerminationTime(org.oasis.wsrf.lifetime.SetTerminationTime params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"setTerminationTime");
    return portType.setTerminationTime(params);
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeCopyRight getCodingSchemeCopyright(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getCodingSchemeCopyright");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemeCopyrightRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemeCopyrightRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemeCopyrightRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemeCopyrightRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemeCopyrightRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemeCopyrightRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetCodingSchemeCopyrightResponse boxedResult = portType.getCodingSchemeCopyright(params);
    return boxedResult.getCodingSchemeCopyRight();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.Core.Association getAssociationReverseOneLevel(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.ConceptIdentification conceptIdentification,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.RelationContainerIdentification relationContainerIdentification,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.AssociationIdentification associationIdentification,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.ResolveConcepts buildReferencedEntries,org.LexGrid.LexBIG.iso21090.DataModel.Collections.NameAndValueList associationQualifiers) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAssociationReverseOneLevel");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestConceptIdentification conceptIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestConceptIdentification();
    conceptIdentificationContainer.setConceptIdentification(conceptIdentification);
    params.setConceptIdentification(conceptIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestRelationContainerIdentification relationContainerIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestRelationContainerIdentification();
    relationContainerIdentificationContainer.setRelationContainerIdentification(relationContainerIdentification);
    params.setRelationContainerIdentification(relationContainerIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestAssociationIdentification associationIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestAssociationIdentification();
    associationIdentificationContainer.setAssociationIdentification(associationIdentification);
    params.setAssociationIdentification(associationIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestBuildReferencedEntries buildReferencedEntriesContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestBuildReferencedEntries();
    buildReferencedEntriesContainer.setResolveConcepts(buildReferencedEntries);
    params.setBuildReferencedEntries(buildReferencedEntriesContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestAssociationQualifiers associationQualifiersContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelRequestAssociationQualifiers();
    associationQualifiersContainer.setNameAndValueList(associationQualifiers);
    params.setAssociationQualifiers(associationQualifiersContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationReverseOneLevelResponse boxedResult = portType.getAssociationReverseOneLevel(params);
    return boxedResult.getAssociation();
    }
  }

  public org.LexGrid.LexBIG.iso21090.DataModel.Core.Association getAssociationForwardOneLevel(org.LexGrid.LexBIG.iso21090.DataModel.cagrid.ConceptIdentification conceptIdentification,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.RelationContainerIdentification relationContainerIdentification,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.AssociationIdentification associationIdentification,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.iso21090.DataModel.Core.CodingSchemeVersionOrTag versionOrTag,org.LexGrid.LexBIG.iso21090.DataModel.cagrid.ResolveConcepts buildReferencedEntries,org.LexGrid.LexBIG.iso21090.DataModel.Collections.NameAndValueList associationQualifiers) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getAssociationForwardOneLevel");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestConceptIdentification conceptIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestConceptIdentification();
    conceptIdentificationContainer.setConceptIdentification(conceptIdentification);
    params.setConceptIdentification(conceptIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestRelationContainerIdentification relationContainerIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestRelationContainerIdentification();
    relationContainerIdentificationContainer.setRelationContainerIdentification(relationContainerIdentification);
    params.setRelationContainerIdentification(relationContainerIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestAssociationIdentification associationIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestAssociationIdentification();
    associationIdentificationContainer.setAssociationIdentification(associationIdentification);
    params.setAssociationIdentification(associationIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestBuildReferencedEntries buildReferencedEntriesContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestBuildReferencedEntries();
    buildReferencedEntriesContainer.setResolveConcepts(buildReferencedEntries);
    params.setBuildReferencedEntries(buildReferencedEntriesContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestAssociationQualifiers associationQualifiersContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelRequestAssociationQualifiers();
    associationQualifiersContainer.setNameAndValueList(associationQualifiers);
    params.setAssociationQualifiers(associationQualifiersContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.stubs.GetAssociationForwardOneLevelResponse boxedResult = portType.getAssociationForwardOneLevel(params);
    return boxedResult.getAssociation();
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

}
