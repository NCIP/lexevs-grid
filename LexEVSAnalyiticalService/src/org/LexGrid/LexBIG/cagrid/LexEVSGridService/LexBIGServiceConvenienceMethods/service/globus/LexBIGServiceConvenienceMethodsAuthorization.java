package org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.service.globus;


import java.rmi.RemoteException;
import javax.security.auth.Subject;
import javax.xml.namespace.QName;
import javax.xml.rpc.handler.MessageContext;

import org.globus.wsrf.impl.security.authorization.exceptions.AuthorizationException;
import org.globus.wsrf.impl.security.authorization.exceptions.CloseException;
import org.globus.wsrf.impl.security.authorization.exceptions.InitializeException;
import org.globus.wsrf.impl.security.authorization.exceptions.InvalidPolicyException;
import org.globus.wsrf.security.authorization.PDP;
import org.globus.wsrf.security.authorization.PDPConfig;
import org.w3c.dom.Node;


/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This is a PDP for use with the globus authorization callout.
 * This class will have a authorize<methodName> method for each method on this grid service.
 * The method is responsibe for making any authorization callouts required to satisfy the 
 * authorization requirements placed on each method call.  Each method will either return
 * apon a successful authorization or will throw an exception apon a failed authorization.
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
public class LexBIGServiceConvenienceMethodsAuthorization implements PDP {

	public static final String SERVICE_NAMESPACE = "http://LexBIGCaGridServices.cagrid.LexBIG.LexGrid.org/LexBIGCaGridServices/LexBIGServiceConvenienceMethods";
	
	
	public LexBIGServiceConvenienceMethodsAuthorization() {
	}
	
	protected String getServiceNamespace(){
		return SERVICE_NAMESPACE;
	}
	
	public static String getCallerIdentity() {
		String caller = org.globus.wsrf.security.SecurityManager.getManager().getCaller();
		if ((caller == null) || (caller.equals("<anonymous>"))) {
			return null;
		} else {
			return caller;
		}
	}
					
	public static void authorizeGetServiceSecurityMetadata() throws RemoteException {
		
		
	}
					
	public static void authorizeGetRenderingDetail() throws RemoteException {
		
		
	}
					
	public static void authorizeGetCodingSchemesWithSupportedAssociation() throws RemoteException {
		
		
	}
					
	public static void authorizeGetHierarchyIDs() throws RemoteException {
		
		
	}
					
	public static void authorizeIsCodeRetired() throws RemoteException {
		
		
	}
					
	public static void authorizeGetAssociationForwardName() throws RemoteException {
		
		
	}
					
	public static void authorizeGetAssociationForwardNames() throws RemoteException {
		
		
	}
					
	public static void authorizeGetAssociationReverseName() throws RemoteException {
		
		
	}
					
	public static void authorizeGetAssociationReverseNames() throws RemoteException {
		
		
	}
					
	public static void authorizeIsForwardName() throws RemoteException {
		
		
	}
					
	public static void authorizeIsReverseName() throws RemoteException {
		
		
	}
					
	public static void authorizeGetHierarchyLevelNext() throws RemoteException {
		
		
	}
					
	public static void authorizeGetHierarchyLevelPrev() throws RemoteException {
		
		
	}
					
	public static void authorizeGetHierarchyPathToRoot() throws RemoteException {
		
		
	}
					
	public static void authorizeGetHierarchyRoots() throws RemoteException {
		
		
	}
					
	public static void authorizeGetHierarchyRootSet() throws RemoteException {
		
		
	}
					
	public static void authorizeGetMultipleResourceProperties() throws RemoteException {
		
		
	}
					
	public static void authorizeGetResourceProperty() throws RemoteException {
		
		
	}
					
	public static void authorizeQueryResourceProperties() throws RemoteException {
		
		
	}
					
	public static void authorizeCreateCodeNodeSet() throws RemoteException {
		
		
	}
					
	public static void authorizeGetAssociationForwardAndReverseNames() throws RemoteException {
		
		
	}
					
	public static void authorizeDestroy() throws RemoteException {
		
		
	}
					
	public static void authorizeSetTerminationTime() throws RemoteException {
		
		
	}
					
	public static void authorizeGetCodingSchemeCopyright() throws RemoteException {
		
		
	}
					
	public static void authorizeGetAssociationReverseOneLevel() throws RemoteException {
		
		
	}
					
	public static void authorizeGetAssociationForwardOneLevel() throws RemoteException {
		
		
	}
	
	
	public boolean isPermitted(Subject peerSubject, MessageContext context, QName operation)
		throws AuthorizationException {
		
		if(!operation.getNamespaceURI().equals(getServiceNamespace())){
		  return false;
		}
		if(operation.getLocalPart().equals("getServiceSecurityMetadata")){
			try{
				authorizeGetServiceSecurityMetadata();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getRenderingDetail")){
			try{
				authorizeGetRenderingDetail();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getCodingSchemesWithSupportedAssociation")){
			try{
				authorizeGetCodingSchemesWithSupportedAssociation();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getHierarchyIDs")){
			try{
				authorizeGetHierarchyIDs();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("isCodeRetired")){
			try{
				authorizeIsCodeRetired();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getAssociationForwardName")){
			try{
				authorizeGetAssociationForwardName();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getAssociationForwardNames")){
			try{
				authorizeGetAssociationForwardNames();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getAssociationReverseName")){
			try{
				authorizeGetAssociationReverseName();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getAssociationReverseNames")){
			try{
				authorizeGetAssociationReverseNames();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("isForwardName")){
			try{
				authorizeIsForwardName();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("isReverseName")){
			try{
				authorizeIsReverseName();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getHierarchyLevelNext")){
			try{
				authorizeGetHierarchyLevelNext();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getHierarchyLevelPrev")){
			try{
				authorizeGetHierarchyLevelPrev();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getHierarchyPathToRoot")){
			try{
				authorizeGetHierarchyPathToRoot();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getHierarchyRoots")){
			try{
				authorizeGetHierarchyRoots();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getHierarchyRootSet")){
			try{
				authorizeGetHierarchyRootSet();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getMultipleResourceProperties")){
			try{
				authorizeGetMultipleResourceProperties();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getResourceProperty")){
			try{
				authorizeGetResourceProperty();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("queryResourceProperties")){
			try{
				authorizeQueryResourceProperties();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("createCodeNodeSet")){
			try{
				authorizeCreateCodeNodeSet();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getAssociationForwardAndReverseNames")){
			try{
				authorizeGetAssociationForwardAndReverseNames();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("destroy")){
			try{
				authorizeDestroy();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("setTerminationTime")){
			try{
				authorizeSetTerminationTime();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getCodingSchemeCopyright")){
			try{
				authorizeGetCodingSchemeCopyright();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getAssociationReverseOneLevel")){
			try{
				authorizeGetAssociationReverseOneLevel();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getAssociationForwardOneLevel")){
			try{
				authorizeGetAssociationForwardOneLevel();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} 		
		return false;
	}
	

	public Node getPolicy(Node query) throws InvalidPolicyException {
		return null;
	}


	public String[] getPolicyNames() {
		return null;
	}


	public Node setPolicy(Node policy) throws InvalidPolicyException {
		return null;
	}


	public void close() throws CloseException {


	}


	public void initialize(PDPConfig config, String name, String id) throws InitializeException {

	}
	
	
}
