/*
 * Copyright: (c) 2004-2007 Mayo Foundation for Medical Education and 
 * Research (MFMER). All rights reserved. MAYO, MAYO CLINIC, and the
 * triple-shield Mayo logo are trademarks and service marks of MFMER.
 *
 * Except as contained in the copyright notice above, or as used to identify 
 * MFMER as the author of this software, the trade names, trademarks, service
 * marks, or product names of the copyright holder shall not be used in
 * advertising, promotion or otherwise in connection with this software without
 * prior written authorization of the copyright holder.
 * 
 * Licensed under the Eclipse Public License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * 		http://www.eclipse.org/legal/epl-v10.html
 * 
 */
package org.LexGrid.LexBIG.cagrid.LexEVSGridService.client;

import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Observable;

import org.LexGrid.LexBIG.DataModel.Collections.AbsoluteCodingSchemeVersionReferenceList;
import org.LexGrid.LexBIG.DataModel.Collections.CodingSchemeRenderingList;
import org.LexGrid.LexBIG.DataModel.Collections.ConceptReferenceList;
import org.LexGrid.LexBIG.DataModel.Collections.ExtensionDescriptionList;
import org.LexGrid.LexBIG.DataModel.Collections.LocalNameList;
import org.LexGrid.LexBIG.DataModel.Collections.ModuleDescriptionList;
import org.LexGrid.LexBIG.DataModel.Collections.ResolvedConceptReferenceList;
import org.LexGrid.LexBIG.DataModel.Core.AbsoluteCodingSchemeVersionReference;
import org.LexGrid.LexBIG.DataModel.Core.CodingSchemeSummary;
import org.LexGrid.LexBIG.DataModel.Core.CodingSchemeVersionOrTag;
import org.LexGrid.LexBIG.DataModel.Core.ConceptReference;
import org.LexGrid.LexBIG.DataModel.Core.ResolvedConceptReference;
import org.LexGrid.LexBIG.DataModel.InterfaceElements.CodingSchemeRendering;
import org.LexGrid.LexBIG.DataModel.InterfaceElements.ExtensionDescription;
import org.LexGrid.LexBIG.DataModel.InterfaceElements.ModuleDescription;
import org.LexGrid.LexBIG.Extensions.Generic.LexBIGServiceConvenienceMethods;
import org.LexGrid.LexBIG.History.HistoryService;
import org.LexGrid.LexBIG.LexBIGService.CodedNodeGraph;
import org.LexGrid.LexBIG.LexBIGService.CodedNodeSet;
import org.LexGrid.LexBIG.LexBIGService.LexBIGService;
import org.LexGrid.LexBIG.LexBIGService.LexBIGServiceMetadata;
import org.LexGrid.LexBIG.LexBIGService.CodedNodeSet.PropertyType;
import org.LexGrid.LexBIG.LexBIGService.CodedNodeSet.SearchDesignationOption;
import org.LexGrid.LexBIG.Utility.Constructors;
import org.LexGrid.LexBIG.cagrid.LexEVSGridService.common.LexEVSGridServiceConstants;
import org.LexGrid.LexBIG.cagrid.LexEVSGridService.common.LexEVSGridServiceI;
import org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.LexEVSGridServicePortType;
import org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.service.LexEVSGridServiceAddressingLocator;
import org.LexGrid.LexBIG.cagrid.adapters.LexBIGServiceGridAdapter;
import org.LexGrid.codingSchemes.CodingScheme;
import org.LexGrid.relations.Relations;
import org.LexGrid.versions.SystemRelease;
import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;
import org.oasis.wsrf.properties.GetResourcePropertyResponse;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.1
 */
public class LexEVSGridServiceClient extends ServiceSecurityClient implements LexEVSGridServiceI {	
	protected LexEVSGridServicePortType portType;
	private Object portTypeMutex;
	
	private List<EndpointReferenceType> resources;

	public LexEVSGridServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public LexEVSGridServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(url,proxy);
		initialize();
	}

	public LexEVSGridServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		this(epr,null);
	}

	public LexEVSGridServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		super(epr,proxy);
		initialize();
	}

	private void initialize() throws RemoteException {
		this.portTypeMutex = new Object();
		this.portType = createPortType();
		resources = new ArrayList<EndpointReferenceType>();
		resources.add(this.epr);
	}

	private LexEVSGridServicePortType createPortType() throws RemoteException {

		LexEVSGridServiceAddressingLocator locator = new LexEVSGridServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		LexEVSGridServicePortType port = null;
		try {
			port = locator.getLexEVSGridServicePortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
		}

		return port;
	}

	public static void usage(){
		System.out.println(LexEVSGridServiceClient.class.getName() + " -url <service url>");
	}

	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		
	}

	public static void main(String [] args){
		System.out.println("Running the Grid Service Client");
		LexEVSGridServiceClient localclient = null;
		
		try{				
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
					String url = args[1];	
					System.out.println("Connecting To caGRID Service at: " + url);
					localclient = new LexEVSGridServiceClient(url);
				} else {
					usage();
					System.exit(1);
				}			
			} else {
				System.out.println("Please specify a URL");
				System.exit(0);
			}

			try {
				//csrlinit = localclient.getSupportedCodingSchemes();
				//int codingSchemes = csrlinit.getCodingSchemeRendering().length;
				System.out.println("*******************************************");
				System.out.println("*                                         *");
				System.out.println("*       Deployment Verification           *");
				System.out.println("*                                         *");
				System.out.println("*******************************************");
				//System.out.println("There are " + codingSchemes + " loaded Coding Schemes.");
				System.out.println("If this number is 0 or you see an error, the deployment was not a success.");
				System.out.println("If this number is > 0, the deployment was a success.");
			} catch (Exception e) {
				System.out.println("Error connecting...");
				e.printStackTrace();
			}
						
			
					LexBIGService client = new LexBIGServiceGridAdapter(localclient).getLexBIGServiceInterface();						
				
					System.out.println("================================");
					System.out.println("   Testing Basic Functionality  ");
					System.out.println("   NOTE: Some of these basic    ");
					System.out.println("   tests may fail depending on  ");
					System.out.println("     loaded Coding Schemes.	    ");
					System.out.println("================================");
		
					System.out.println();
					System.out.println("================================");
					System.out.println("Testing LexBIGService Operations");
					System.out.println("================================");
					
					System.out.println("\tService: getSupportedCodingSchemes");
					CodingSchemeRenderingList csrl = client.getSupportedCodingSchemes();
						
					CodingSchemeRendering[] csr = csrl.getCodingSchemeRendering();

					for(int i=0;i<csr.length;i++){

						System.out.println("\t\tOutput: " + "Coding Scheme: " + csr[i].getCodingSchemeSummary().getLocalName());
						System.out.println("\t\tOutput: " + "  -- Version: " + csr[i].getCodingSchemeSummary().getRepresentsVersion());
						System.out.println("\t\tOutput: " + "  -- URN: " + csr[i].getCodingSchemeSummary().getCodingSchemeURI());		
					}
					
					System.out.println();
					System.out.println("=======================================================");
					System.out.println("                  **SUMMARY**                          ");
					System.out.println("=======================================================");
					System.out.println(" If you have seen output for the loaded CodingSchemes, ");
					System.out.println("and not seen any error messages, the LexEVSGrid Service");
					System.out.println("    has been deployed correctly and is functioning.    ");
				
					
					CodedNodeSet cns = client.getCodingSchemeConcepts("Zebrafish", null);
					cns.resolve(null, null, null);
				
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
  protected void finalizeTest(){
	  System.out.println("Client has died ;)");
	  try {
		  GetResourcePropertyResponse response = this.getResourceProperty(LexEVSGridServiceConstants.RESOURCE_PROPERTY_SET);
		  System.out.println("here");
		  /*
		  super.finalize();
		Iterator resourceItr = resources.iterator();
		while (resourceItr.hasNext()) {
			EndpointReferenceType ref = (EndpointReferenceType)resourceItr.next();
			//LexBIGCaGridServicesClient client = new LexBIGCaGridServicesClient(ref);
			//GetResourcePropertyResponse response = client.getResourceProperty(null);
			System.out.println("here");
			*/
	  } catch (Throwable e) {
		e.printStackTrace();
	}
	  System.out.println("Client has died ;)");
  }

  public org.LexGrid.LexBIG.DataModel.Collections.CodingSchemeRenderingList getSupportedCodingSchemes() throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getSupportedCodingSchemes");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetSupportedCodingSchemesRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetSupportedCodingSchemesRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetSupportedCodingSchemesResponse boxedResult = portType.getSupportedCodingSchemes(params);
    return boxedResult.getCodingSchemeRenderingList();
    }
  }

  public org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeSet.client.CodedNodeSetClient getCodingSchemeConcepts(org.LexGrid.LexBIG.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getCodingSchemeConcepts");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetCodingSchemeConceptsRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetCodingSchemeConceptsRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetCodingSchemeConceptsRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetCodingSchemeConceptsRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetCodingSchemeConceptsRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetCodingSchemeConceptsRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetCodingSchemeConceptsResponse boxedResult = portType.getCodingSchemeConcepts(params);
    EndpointReferenceType ref = boxedResult.getCodedNodeSetReference().getEndpointReference();
    return new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeSet.client.CodedNodeSetClient(ref);
    }
  }

  public java.util.Date getLastUpdateTime() throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getLastUpdateTime");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetLastUpdateTimeRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetLastUpdateTimeRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetLastUpdateTimeResponse boxedResult = portType.getLastUpdateTime(params);
    return boxedResult.getResponse();
    }
  }

  public org.LexGrid.codingSchemes.CodingScheme resolveCodingScheme(org.LexGrid.LexBIG.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"resolveCodingScheme");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeResponse boxedResult = portType.resolveCodingScheme(params);
    return boxedResult.getCodingScheme();
    }
  }

  public org.LexGrid.LexBIG.DataModel.Collections.ModuleDescriptionList getMatchAlgorithms() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMatchAlgorithms");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetMatchAlgorithmsRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetMatchAlgorithmsRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetMatchAlgorithmsResponse boxedResult = portType.getMatchAlgorithms(params);
    return boxedResult.getModuleDescriptionList();
    }
  }

  public org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.client.CodedNodeGraphClient getNodeGraph(org.LexGrid.LexBIG.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.DataModel.Core.CodingSchemeVersionOrTag versionOrTag,org.LexGrid.LexBIG.DataModel.cagrid.RelationContainerIdentification relationContainerIdentification) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getNodeGraph");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetNodeGraphRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetNodeGraphRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetNodeGraphRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetNodeGraphRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetNodeGraphRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetNodeGraphRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetNodeGraphRequestRelationContainerIdentification relationContainerIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetNodeGraphRequestRelationContainerIdentification();
    relationContainerIdentificationContainer.setRelationContainerIdentification(relationContainerIdentification);
    params.setRelationContainerIdentification(relationContainerIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetNodeGraphResponse boxedResult = portType.getNodeGraph(params);
    EndpointReferenceType ref = boxedResult.getCodedNodeGraphReference().getEndpointReference();
    return new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.client.CodedNodeGraphClient(ref);
    }
  }

  public org.LexGrid.LexBIG.DataModel.Collections.SortDescriptionList getSortAlgorithms(java.lang.String context) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getSortAlgorithms");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetSortAlgorithmsRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetSortAlgorithmsRequest();
    params.setContext(context);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetSortAlgorithmsResponse boxedResult = portType.getSortAlgorithms(params);
    return boxedResult.getSortDescriptionList();
    }
  }

  public org.LexGrid.LexBIG.DataModel.Collections.ExtensionDescriptionList getGenericExtensions() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getGenericExtensions");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetGenericExtensionsRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetGenericExtensionsRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetGenericExtensionsResponse boxedResult = portType.getGenericExtensions(params);
    return boxedResult.getExtensionDescriptionList();
    }
  }

  public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.client.LexBIGServiceConvenienceMethodsClient getGenericExtension(org.LexGrid.LexBIG.DataModel.cagrid.ExtensionIdentification extensionIdentification) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getGenericExtension");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetGenericExtensionRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetGenericExtensionRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetGenericExtensionRequestExtensionIdentification extensionIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetGenericExtensionRequestExtensionIdentification();
    extensionIdentificationContainer.setExtensionIdentification(extensionIdentification);
    params.setExtensionIdentification(extensionIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetGenericExtensionResponse boxedResult = portType.getGenericExtension(params);
    EndpointReferenceType ref = boxedResult.getLexBIGServiceConvenienceMethodsReference().getEndpointReference();
    return new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceConvenienceMethods.client.LexBIGServiceConvenienceMethodsClient(ref);
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.LexGrid.LexBIG.DataModel.Collections.ExtensionDescriptionList getFilterExtensions() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getFilterExtensions");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetFilterExtensionsRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetFilterExtensionsRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetFilterExtensionsResponse boxedResult = portType.getFilterExtensions(params);
    return boxedResult.getExtensionDescriptionList();
    }
  }

  public org.LexGrid.LexBIG.cagrid.LexEVSGridService.HistoryService.client.HistoryServiceClient getHistoryService(org.LexGrid.LexBIG.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getHistoryService");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetHistoryServiceRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetHistoryServiceRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetHistoryServiceRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetHistoryServiceRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetHistoryServiceResponse boxedResult = portType.getHistoryService(params);
    EndpointReferenceType ref = boxedResult.getHistoryServiceReference().getEndpointReference();
    return new org.LexGrid.LexBIG.cagrid.LexEVSGridService.HistoryService.client.HistoryServiceClient(ref);
    }
  }

  public org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceMetadata.client.LexBIGServiceMetadataClient getServiceMetadata() throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getServiceMetadata");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetServiceMetadataRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetServiceMetadataRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetServiceMetadataResponse boxedResult = portType.getServiceMetadata(params);
    EndpointReferenceType ref = boxedResult.getLexBIGServiceMetadataReference().getEndpointReference();
    return new org.LexGrid.LexBIG.cagrid.LexEVSGridService.LexBIGServiceMetadata.client.LexBIGServiceMetadataClient(ref);
    }
  }

  public org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.client.SortClient getSortAlgorithm(org.LexGrid.LexBIG.DataModel.cagrid.ExtensionIdentification extensionIdentification) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getSortAlgorithm");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetSortAlgorithmRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetSortAlgorithmRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetSortAlgorithmRequestExtensionIdentification extensionIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetSortAlgorithmRequestExtensionIdentification();
    extensionIdentificationContainer.setExtensionIdentification(extensionIdentification);
    params.setExtensionIdentification(extensionIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetSortAlgorithmResponse boxedResult = portType.getSortAlgorithm(params);
    EndpointReferenceType ref = boxedResult.getSortReference().getEndpointReference();
    return new org.LexGrid.LexBIG.cagrid.LexEVSGridService.Sort.client.SortClient(ref);
    }
  }

  public org.LexGrid.LexBIG.cagrid.LexEVSGridService.Filter.client.FilterClient getFilter(org.LexGrid.LexBIG.DataModel.cagrid.ExtensionIdentification extensionIdentification) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getFilter");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetFilterRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetFilterRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetFilterRequestExtensionIdentification extensionIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetFilterRequestExtensionIdentification();
    extensionIdentificationContainer.setExtensionIdentification(extensionIdentification);
    params.setExtensionIdentification(extensionIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.GetFilterResponse boxedResult = portType.getFilter(params);
    EndpointReferenceType ref = boxedResult.getFilterReference().getEndpointReference();
    return new org.LexGrid.LexBIG.cagrid.LexEVSGridService.Filter.client.FilterClient(ref);
    }
  }

  public org.LexGrid.LexBIG.DataModel.cagrid.CodingSchemeCopyRight resolveCodingSchemeCopyright(org.LexGrid.LexBIG.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,org.LexGrid.LexBIG.DataModel.Core.CodingSchemeVersionOrTag versionOrTag) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"resolveCodingSchemeCopyright");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeCopyrightRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeCopyrightRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeCopyrightRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeCopyrightRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeCopyrightRequestVersionOrTag versionOrTagContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeCopyrightRequestVersionOrTag();
    versionOrTagContainer.setCodingSchemeVersionOrTag(versionOrTag);
    params.setVersionOrTag(versionOrTagContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.ResolveCodingSchemeCopyrightResponse boxedResult = portType.resolveCodingSchemeCopyright(params);
    return boxedResult.getCodingSchemeCopyRight();
    }
  }

  public org.LexGrid.LexBIG.cagrid.LexEVSGridService.client.LexEVSGridServiceClient setSecurityToken(org.LexGrid.LexBIG.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification,gov.nih.nci.evs.security.SecurityToken securityToken) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"setSecurityToken");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.SetSecurityTokenRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.SetSecurityTokenRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.SetSecurityTokenRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.SetSecurityTokenRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.SetSecurityTokenRequestSecurityToken securityTokenContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.SetSecurityTokenRequestSecurityToken();
    securityTokenContainer.setSecurityToken(securityToken);
    params.setSecurityToken(securityTokenContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.SetSecurityTokenResponse boxedResult = portType.setSecurityToken(params);
    EndpointReferenceType ref = boxedResult.getLexEVSGridServiceReference().getEndpointReference();
    return new org.LexGrid.LexBIG.cagrid.LexEVSGridService.client.LexEVSGridServiceClient(ref);
    }
  }

}
