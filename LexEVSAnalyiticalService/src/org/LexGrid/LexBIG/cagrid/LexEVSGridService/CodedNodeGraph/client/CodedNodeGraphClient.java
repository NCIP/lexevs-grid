package org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.CodedNodeGraphPortType;
import org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.service.CodedNodeGraphServiceAddressingLocator;
import org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.common.CodedNodeGraphI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class CodedNodeGraphClient extends CodedNodeGraphClientBase implements CodedNodeGraphI {	

	public CodedNodeGraphClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CodedNodeGraphClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public CodedNodeGraphClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CodedNodeGraphClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CodedNodeGraphClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  CodedNodeGraphClient client = new CodedNodeGraphClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.LexGrid.LexBIG.DataModel.Collections.ResolvedConceptReferenceList resolveAsList(org.LexGrid.LexBIG.DataModel.cagrid.GraphResolutionPolicy graphResolutionPolicy) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"resolveAsList");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ResolveAsListRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ResolveAsListRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ResolveAsListRequestGraphResolutionPolicy graphResolutionPolicyContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ResolveAsListRequestGraphResolutionPolicy();
    graphResolutionPolicyContainer.setGraphResolutionPolicy(graphResolutionPolicy);
    params.setGraphResolutionPolicy(graphResolutionPolicyContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ResolveAsListResponse boxedResult = portType.resolveAsList(params);
    return boxedResult.getResolvedConceptReferenceList();
    }
  }

  public org.LexGrid.LexBIG.DataModel.Collections.ConceptReferenceList listCodeRelationships(org.LexGrid.LexBIG.DataModel.cagrid.RelationshipTypeBasedPolicy relationshipTypeBasedPolicy) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"listCodeRelationships");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ListCodeRelationshipsRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ListCodeRelationshipsRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ListCodeRelationshipsRequestRelationshipTypeBasedPolicy relationshipTypeBasedPolicyContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ListCodeRelationshipsRequestRelationshipTypeBasedPolicy();
    relationshipTypeBasedPolicyContainer.setRelationshipTypeBasedPolicy(relationshipTypeBasedPolicy);
    params.setRelationshipTypeBasedPolicy(relationshipTypeBasedPolicyContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ListCodeRelationshipsResponse boxedResult = portType.listCodeRelationships(params);
    return boxedResult.getConceptReferenceList();
    }
  }

  public void restrictToSourceCodeSystem(org.LexGrid.LexBIG.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"restrictToSourceCodeSystem");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToSourceCodeSystemRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToSourceCodeSystemRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToSourceCodeSystemRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToSourceCodeSystemRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToSourceCodeSystemResponse boxedResult = portType.restrictToSourceCodeSystem(params);
    }
  }

  public void restrictToTargetCodeSystem(org.LexGrid.LexBIG.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"restrictToTargetCodeSystem");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToTargetCodeSystemRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToTargetCodeSystemRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToTargetCodeSystemRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToTargetCodeSystemRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToTargetCodeSystemResponse boxedResult = portType.restrictToTargetCodeSystem(params);
    }
  }

  public void restrictToCodeSystem(org.LexGrid.LexBIG.DataModel.cagrid.CodingSchemeIdentification codingSchemeIdentification) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"restrictToCodeSystem");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToCodeSystemRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToCodeSystemRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToCodeSystemRequestCodingSchemeIdentification codingSchemeIdentificationContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToCodeSystemRequestCodingSchemeIdentification();
    codingSchemeIdentificationContainer.setCodingSchemeIdentification(codingSchemeIdentification);
    params.setCodingSchemeIdentification(codingSchemeIdentificationContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToCodeSystemResponse boxedResult = portType.restrictToCodeSystem(params);
    }
  }

  public void restrictToTargetCodes(org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeSet.stubs.types.CodedNodeSetReference codes) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"restrictToTargetCodes");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToTargetCodesRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToTargetCodesRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToTargetCodesRequestCodes codesContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToTargetCodesRequestCodes();
    codesContainer.setCodedNodeSetReference(codes);
    params.setCodes(codesContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToTargetCodesResponse boxedResult = portType.restrictToTargetCodes(params);
    }
  }

  public void restrictToSourceCodes(org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeSet.stubs.types.CodedNodeSetReference codes) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"restrictToSourceCodes");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToSourceCodesRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToSourceCodesRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToSourceCodesRequestCodes codesContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToSourceCodesRequestCodes();
    codesContainer.setCodedNodeSetReference(codes);
    params.setCodes(codesContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToSourceCodesResponse boxedResult = portType.restrictToSourceCodes(params);
    }
  }

  public void restrictToDirectionalNames(org.LexGrid.LexBIG.DataModel.Collections.NameAndValueList directionalNames,org.LexGrid.LexBIG.DataModel.Collections.NameAndValueList associationQualifiers) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"restrictToDirectionalNames");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToDirectionalNamesRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToDirectionalNamesRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToDirectionalNamesRequestDirectionalNames directionalNamesContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToDirectionalNamesRequestDirectionalNames();
    directionalNamesContainer.setNameAndValueList(directionalNames);
    params.setDirectionalNames(directionalNamesContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToDirectionalNamesRequestAssociationQualifiers associationQualifiersContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToDirectionalNamesRequestAssociationQualifiers();
    associationQualifiersContainer.setNameAndValueList(associationQualifiers);
    params.setAssociationQualifiers(associationQualifiersContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToDirectionalNamesResponse boxedResult = portType.restrictToDirectionalNames(params);
    }
  }

  public void restrictToAssociations(org.LexGrid.LexBIG.DataModel.Collections.NameAndValueList associations,org.LexGrid.LexBIG.DataModel.Collections.NameAndValueList associationQualifiers) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"restrictToAssociations");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToAssociationsRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToAssociationsRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToAssociationsRequestAssociations associationsContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToAssociationsRequestAssociations();
    associationsContainer.setNameAndValueList(associations);
    params.setAssociations(associationsContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToAssociationsRequestAssociationQualifiers associationQualifiersContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToAssociationsRequestAssociationQualifiers();
    associationQualifiersContainer.setNameAndValueList(associationQualifiers);
    params.setAssociationQualifiers(associationQualifiersContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToAssociationsResponse boxedResult = portType.restrictToAssociations(params);
    }
  }

  public void restrictToCodes(org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeSet.stubs.types.CodedNodeSetReference codes) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"restrictToCodes");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToCodesRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToCodesRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToCodesRequestCodes codesContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToCodesRequestCodes();
    codesContainer.setCodedNodeSetReference(codes);
    params.setCodes(codesContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.RestrictToCodesResponse boxedResult = portType.restrictToCodes(params);
    }
  }

  public void intersect(org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.types.CodedNodeGraphReference graph) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"intersect");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.IntersectRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.IntersectRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.IntersectRequestGraph graphContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.IntersectRequestGraph();
    graphContainer.setCodedNodeGraphReference(graph);
    params.setGraph(graphContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.IntersectResponse boxedResult = portType.intersect(params);
    }
  }

  public void union(org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.types.CodedNodeGraphReference graph) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"union");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.UnionRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.UnionRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.UnionRequestGraph graphContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.UnionRequestGraph();
    graphContainer.setCodedNodeGraphReference(graph);
    params.setGraph(graphContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.UnionResponse boxedResult = portType.union(params);
    }
  }

  public org.LexGrid.LexBIG.DataModel.cagrid.CodeExistence isCodeInGraph(org.LexGrid.LexBIG.DataModel.Core.ConceptReference code) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"isCodeInGraph");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.IsCodeInGraphRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.IsCodeInGraphRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.IsCodeInGraphRequestCode codeContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.IsCodeInGraphRequestCode();
    codeContainer.setConceptReference(code);
    params.setCode(codeContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.IsCodeInGraphResponse boxedResult = portType.isCodeInGraph(params);
    return boxedResult.getCodeExistence();
    }
  }

  public org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeSet.client.CodedNodeSetClient toNodeList(org.LexGrid.LexBIG.DataModel.cagrid.NodeListPolicy nodeListPolicy) throws RemoteException, org.apache.axis.types.URI.MalformedURIException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"toNodeList");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ToNodeListRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ToNodeListRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ToNodeListRequestNodeListPolicy nodeListPolicyContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ToNodeListRequestNodeListPolicy();
    nodeListPolicyContainer.setNodeListPolicy(nodeListPolicy);
    params.setNodeListPolicy(nodeListPolicyContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ToNodeListResponse boxedResult = portType.toNodeList(params);
    EndpointReferenceType ref = boxedResult.getCodedNodeSetReference().getEndpointReference();
    return new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeSet.client.CodedNodeSetClient(ref,getProxy());
    }
  }

  public org.LexGrid.LexBIG.DataModel.cagrid.CodeRelationship areCodesRelated(org.LexGrid.LexBIG.DataModel.cagrid.RelationshipTypeBasedPolicy relationshipTypeBasedPolicy,org.LexGrid.LexBIG.DataModel.Core.NameAndValue nameAndValue) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"areCodesRelated");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.AreCodesRelatedRequest params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.AreCodesRelatedRequest();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.AreCodesRelatedRequestRelationshipTypeBasedPolicy relationshipTypeBasedPolicyContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.AreCodesRelatedRequestRelationshipTypeBasedPolicy();
    relationshipTypeBasedPolicyContainer.setRelationshipTypeBasedPolicy(relationshipTypeBasedPolicy);
    params.setRelationshipTypeBasedPolicy(relationshipTypeBasedPolicyContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.AreCodesRelatedRequestNameAndValue nameAndValueContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.AreCodesRelatedRequestNameAndValue();
    nameAndValueContainer.setNameAndValue(nameAndValue);
    params.setNameAndValue(nameAndValueContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.AreCodesRelatedResponse boxedResult = portType.areCodesRelated(params);
    return boxedResult.getCodeRelationship();
    }
  }

  public org.LexGrid.LexBIG.DataModel.Collections.ConceptReferenceList listCodeRelationships2(org.LexGrid.LexBIG.DataModel.cagrid.RelationshipDistanceBasedPolicy relationshipDistanceBasedPolicy) throws RemoteException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.InvalidServiceContextAccess, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBInvocationException, org.LexGrid.LexBIG.cagrid.LexEVSGridService.stubs.types.LBParameterException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"listCodeRelationships2");
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ListCodeRelationships2Request params = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ListCodeRelationships2Request();
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ListCodeRelationships2RequestRelationshipDistanceBasedPolicy relationshipDistanceBasedPolicyContainer = new org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ListCodeRelationships2RequestRelationshipDistanceBasedPolicy();
    relationshipDistanceBasedPolicyContainer.setRelationshipDistanceBasedPolicy(relationshipDistanceBasedPolicy);
    params.setRelationshipDistanceBasedPolicy(relationshipDistanceBasedPolicyContainer);
    org.LexGrid.LexBIG.cagrid.LexEVSGridService.CodedNodeGraph.stubs.ListCodeRelationships2Response boxedResult = portType.listCodeRelationships2(params);
    return boxedResult.getConceptReferenceList();
    }
  }

  public org.oasis.wsrf.lifetime.DestroyResponse destroy(org.oasis.wsrf.lifetime.Destroy params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"destroy");
    return portType.destroy(params);
    }
  }

  public org.oasis.wsrf.lifetime.SetTerminationTimeResponse setTerminationTime(org.oasis.wsrf.lifetime.SetTerminationTime params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"setTerminationTime");
    return portType.setTerminationTime(params);
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

}
